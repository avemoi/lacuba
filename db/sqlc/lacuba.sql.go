// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: lacuba.sql

package db

import (
	"context"
	"database/sql"
)

const createLacuba = `-- name: CreateLacuba :execresult
INSERT INTO lacuba (
    longtitude,
    latitude

) VALUES (
             ?, ?
         )
`

type CreateLacubaParams struct {
	Longtitude float64 `json:"longtitude"`
	Latitude   float64 `json:"latitude"`
}

func (q *Queries) CreateLacuba(ctx context.Context, arg CreateLacubaParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createLacuba, arg.Longtitude, arg.Latitude)
}

const getLacuba = `-- name: GetLacuba :one


SELECT id, latitude, longtitude, created_at FROM lacuba
where id = ? LIMIT 1
`

// noinspection SqlDialectInspectionForFile
// noinspection SqlNoDataSourceInspectionForFile
func (q *Queries) GetLacuba(ctx context.Context, id int64) (Lacuba, error) {
	row := q.db.QueryRowContext(ctx, getLacuba, id)
	var i Lacuba
	err := row.Scan(
		&i.ID,
		&i.Latitude,
		&i.Longtitude,
		&i.CreatedAt,
	)
	return i, err
}

const listLacubas = `-- name: ListLacubas :many
SELECT id, latitude, longtitude, created_at FROM lacuba
`

func (q *Queries) ListLacubas(ctx context.Context) ([]Lacuba, error) {
	rows, err := q.db.QueryContext(ctx, listLacubas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lacuba
	for rows.Next() {
		var i Lacuba
		if err := rows.Scan(
			&i.ID,
			&i.Latitude,
			&i.Longtitude,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
